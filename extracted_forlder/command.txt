------------------------------------------------
import subprocess
import os

#rootdir = './asgn/'
rootdir = './CP493-Grader/'
print(rootdir)
for subdir, dirs, files in os.walk(rootdir):
	print(1)
	for file in files:
		filePath = os.path.join(subdir, file)
		print(filePath)
		if (".c" in filePath):
			print(filePath)
			# output = subprocess.check_output(command, shell=True)
			# print(output)
			command = "gcc -o" + "assignment "+ filePath + "/n"
			os.system(command)
			command = "assignment"	
			os.system(command)
			#command = "python3 " + filePath + " <<EOF\n16 14 10 8 7 9 3 2 1 0\n10\nEOF\n"
        	#os.system(command)
        	#command = "python3 " + filePath + " <<EOF\n81 63 61 58 52 46 47 31 37\n9\nEOF\n"
        	#os.system(command)
        	#command = "python3 " + filePath + " <<EOF\n81 61 63 58 52 46 47 31 37\n9\nEOF\n"
        	#os.system(command)
        	#command = "python3 " + filePath + " <<EOF\n81 63 61 58 52 46 47 59 37\n9\nEOF\n"
        	#os.system(command)
        	
			print("\n")

-------------------------------------------
import os
import subprocess

command = "a2q2 4"
os.system(command)
#subprocess.Popen(command)
output = subprocess.check_output(command,shell=True)
#print("")
#print(str(output)[2:-1])
outF = open("submission.txt","w")
outF.write(str(output)[2:-1])
outF.close()
--------------------------------
https://github.com/MyGradingSpace/Python-Grader.git



----------------------------------
import os

import fnmatch

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.c'):
        print (file)

--------------------------------------
while(1==1){
}

------------------------------
ErrorHandler.py
import os
import subprocess
import fnmatch
import time
from subprocess import STDOUT, check_output
from threading import Timer

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.c'):
        filename = file[:-2]
        absolutefile = file

# print(absolutefile)

command = "gcc -o "+ filename +" " + absolutefile
os.system(command)
command = filename
# kill = lambda process: process.kill()
# output = subprocess.Popen(command,shell=True,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
# my_timer = Timer(5.0,kill,[output])
# try:
#     my_timer.start()
#     stdout,stderr = output.communicate()
# finally:
#     my_timer.cancel()
output=check_output(command,stderr=STDOUT,timeout=5.5)
print(output)
-----------------------------------------------
import os
import subprocess
import fnmatch
import time
from subprocess import STDOUT, check_output
from threading import Timer

args = open("arguments.txt","r")
outF = open("submission.txt","w")

for file in os.listdir('.'):
    if fnmatch.fnmatch(file, '*.c'):
        filename = file[:-2]
        absolutefile = file

command = "gcc -o "+filename +" " + absolutefile
os.system(command)

n=1
outF.seek(0)
args.seek(0)

for line in args:
    command = filename +" " + line

    output = check_output(command,stderr=STDOUT,timeout=5.5)
    output = str(output)
    output.strip("\n")
    output.strip("\r")
    output=output[2:-1]
    output = "case"+str(n)+" "+output+"\n" 
    outF.write(output)
    n=n+1

args.close()
outF.close()
----------------------------------------------------

import csv
import os
import subprocess
from data_structure import testResult,markings,results,responseBody
from data_structure import add_testResult,add_markings,add_results
import fnmatch
import time
from subprocess import STDOUT, check_output
from threading import Timer
import pandas as pd
import json


output=open("output.csv","r")
gradingID = "YYYYMM-CP493-a01-ab12"
numberOfSubmission = 1
studentName = "Fangjian Lei"
studentID = "163165490"

this_responseBody = dict(responseBody)
this_results = dict(results)
df = pd.read_csv(output, delimiter=',',dtype=str)
this_responseBody["gradingId"] = gradingID
this_responseBody["numOfSubmissions"]=numberOfSubmission
this_results ["studentID"] =studentID
this_results["EntityId"] = ""
this_testResult =dict(testResult)
this_markings =dict(markings)
this_markings["filename"] = "a2q2"
this_markings["marked"] = True
with open("send.json","w+") as json_file:
    i=0
    for i in range(len(df.index)):
        # print(df["Case Number"][i])
        
        this_testResult["output"] = df["Output"][i]
        this_testResult["expectOutput"] = df["Expect Output"][i]
        this_testResult["match"] =df["Result"][i]
        this_testResult["marks"] = df["Marks"][i]
        # this_markings["testResult"] = this_testResult
        add_testResult(this_testResult,this_markings)
        this_testResult =dict(testResult)
    add_markings(this_markings,this_results)
    add_results(this_results,this_responseBody)
    
    json.dump(this_responseBody,json_file,indent=4)
    
output.close()
json_file.close()




